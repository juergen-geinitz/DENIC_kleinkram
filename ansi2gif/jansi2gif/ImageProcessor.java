/*
 * $Id: ImageProcessor.java,v 1.3 2009/11/17 19:10:55 gei Exp $
 * $Log: ImageProcessor.java,v $
 * Revision 1.3  2009/11/17 19:10:55  gei
 * verwendet neue font klasse
 *
 * Revision 1.2  2009/11/15 12:34:11  gei
 * suche solaris positionierungprobleme
 *
 * Revision 1.1  2009/11/14 15:00:49  gei
 * refactor
 *
 * Revision 1.1.1.1.2.2  2009/11/14 11:21:52  gei
 * optik - einrueckungen usw
 *
 * Revision 1.1.1.1.2.1  2009/11/14 10:17:18  gei
 * cvs
 *
 */
package jansi2gif;

import de.xn__jrgen_geinitz_wob.*;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Date;

/**
 *
 * @author gei
 */
public class ImageProcessor {

    private static int fontXsize = 8;
    private static int fontYsize = 16;
    private int xsize;
    private int ysize;
    private int charcount;
    private int charcountmax;
    private Screen scr;
    private int savechar;
    Reader infile;
    AnimatedGifEncoder gif;
    private int X_save,
            Y_save;
    private char current_mode = 0;
    private int loop;
    private static final int mode_graphics = 32;
    private int vt100_ptr;
    private int param_ptr = 0;
    private static final int VT100_BUF = 10;
    private char vt100[] = new char[VT100_BUF * 2];
    private int vt100_params[] = new int[VT100_BUF * 3];
    private int q_mark;
    private int Infocounter = 0;
    private int delay,
            fdelay,
            numbernl,
            numberesc;
    private boolean boldmode;
    private boolean g1charset = false;
    private int ungetchar;
    private boolean ungetvalid = false;
            /* Generated by font2include.c */

    private usefont thefont;
    private char flushreason = ' ';
    /***
     * This is the worker
     *
     * @param x x-size of screen
     * @param y y-size of screen
     */
    public ImageProcessor(int x, int y) {
        init(x, y);
    }

    /**
     * setup with default 80x25 screen
     */
    public ImageProcessor() {
        init(80, 25);
    }

    /**
     * do the real init
     * @param xsize
     * @param ysize
     */
    private void init(int x, int y) {
        scr = new Screen(x, y);
        xsize     = x;
        ysize     = y;
        charcount = 0;
        gif       = new AnimatedGifEncoder();
        gif.setRepeat(1);
        gif.setQuality(20);
        thefont = new usefont();

    }

    private void setflushreason(char c) {
        flushreason = c;
    }
    
    private String getflushreason() {
        char c;
        c = flushreason;
        flushreason = ' ';
        switch (c) {
            case ' ':
                return "      ";
            case 'E':
                return "<ESC> ";
            case 'n':
                return "<NL>  ";
            case 'c':
                return "cnt   ";
            case 'C':
                return "<CLS> ";
            case 'j':
                return "DOWN  ";
        }
        return "UNK   ";
    }
    
    /**
     * create the first gif frame
     * @param Fname filename
     */
    public void createGif(String Fname) {
        if (!gif.start(Fname)) {
            System.err.print("Abort: cannot create gif " + Fname);
        }
        gif.setDelay(delay);
    }

    /**
     * write out one gif frame
     */
    public void writeGif(char c) {
        int x,
                y,
                b;
        char ani[] = {' ', '.', 'o', 'O', 'O', 'o', '.'};

        // create a new image buffer
        setflushreason(c);
        BufferedImage img = new BufferedImage(
                xsize * fontXsize,
                ysize * fontYsize,
                BufferedImage.TYPE_INT_RGB);

        // fetch the graph context
        Graphics2D g = (Graphics2D) img.getGraphics();

        charcount = 0;
        // fill the image
        for (y = 0; y < ysize; y++) {
            for (x = 0; x < xsize; x++) {
                // clear the background for thist char
                g.clearRect(x * 8, y * 16, 7, 15);
                // set BG color
                g.setColor(scr.getBcolor(x, y));
                // fill BG
                g.fillRect(x * 8, y * 16, 8, 16);
                // set foreground color
                g.setColor(scr.getFcolor(x, y));
                // and draw a character
                PaintChar(x, y, g);
            }
        }
        // image is painted - write it
        gif.addFrame(img);

        // clean memory sometimes
        if (( Infocounter % 333 ) == 0) {
            System.gc();
        }

        // show some action in verbose mode
        Infocounter++;
        if (Main.v.getVerbose()) {
            System.out.print("  imaging " +
                    ani[Infocounter % 7] +
                    "   " + getflushreason() +
                    "          " +
                    Infocounter +
                    "           \r");
            System.out.flush();
        }
    }

    /**
     * end the gif
     */
    public void endGif() {
        writeGif(' ');
        gif.finish();
    }

    /**
     * store char c at current position
     * @param c
     */
    public void putchar(char c) {
        Iputchar(c);
        charcount++;
        if (charcount >= charcountmax) {
            charcount = 0;
            writeGif('c');
        }
    }

    /**
     * store char c at current position
     * @param c
     */
    private void Iputchar(char c) {
        scr.setboldmode(boldmode);
        scr.setchar(c);
    }

    /**
     * paint a char at position x,y
     * @param x
     * @param y
     * @param scr
     * @param g
     */
    private void PaintChar(int x, int y, Graphics2D g) {
        int b;
        int sx = x * 8;
        int sy = y * 16;
        int c = scr.getChar(x, y) & 0xff;

        for (b = 0; b < 16; b++) {
            if ( thefont.getbit(c, b, 0x80 ) ) {
                g.drawLine(sx + 0, sy + b, sx + 0, sy + b);
            }
            if ( thefont.getbit(c, b, 0x40 ) ) {
                g.drawLine(sx + 1, sy + b, sx + 1, sy + b);
            }
            if ( thefont.getbit(c, b, 0x20 ) ) {
                g.drawLine(sx + 2, sy + b, sx + 2, sy + b);
            }
            if ( thefont.getbit(c, b, 0x10 ) ) {
                g.drawLine(sx + 3, sy + b, sx + 3, sy + b);
            }
            if ( thefont.getbit(c, b, 8 ) )  {
                g.drawLine(sx + 4, sy + b, sx + 4, sy + b);
            }
            if ( thefont.getbit(c, b, 4 ) ) {
                g.drawLine(sx + 5, sy + b, sx + 5, sy + b);
            }
            if ( thefont.getbit(c, b, 2) ) {
                g.drawLine(sx + 6, sy + b, sx + 6, sy + b);
            }
            if ( thefont.getbit(c, b, 1) ) {
                g.drawLine(sx + 7, sy + b, sx + 7, sy + b);
            }
        }
    }

    /**
     * where the next char will be put on the screen
     * @param x
     * @param y
     */
    public void setpos(int x, int y) {
        if (x < 0) {
            /*        x = scr.getXsize() - 1;
            y--;*/ x = 0;
        }
        if (y < 0) {
            y = 0;
        }
        if (x >= scr.getXsize()) {
            x = 0;
            y++;
        }
        scr.setpos(x, y);
    }

    /**
     * clear the screen
     */
    public void cls() {
        writeGif('C');
        scr.cls();
    }

    /**
     * a wrapper for buffered read with a simple unget
     */
    private int doread() {
        if (ungetvalid) {
            ungetvalid = false;
            return ungetchar;
        } else {
            try {
                return infile.read();
            } catch (IOException ex) {
                System.out.println("Read error " + ex);
                return -1;
            }
        }
    }

    /**
     * the unget for doread
     */
    private void doUnread(int c) {
        ungetvalid = true;
        ungetchar = c;
    }

    public void processInFile(String fname) {
        infile = null;
        int nlcounter = 0, esccounter = 0;
        try {
            infile = new FileReader(fname);

            for (int c; ( c = doread() ) != -1;) {
                if (( ( c & 0x7f ) > 31 ) && ( ( c & 0x7f ) < 127 )) {
                    if (g1charset) {
                        c |= 0x80;
                    }
                    putchar((char) c);
                } else {
                    switch (c) { // not a display char
                    case 14: // SO
                        g1charset = true;
                        break;
                    case 15: // SI
                        g1charset = false;
                        break;
                    case 8:
                        setpos(scr.getX() - 1, scr.getY()); // BS
                        break;
                    case 9:
                        setpos((scr.getX() / 9 + 9)*9, scr.getY());
                        break;
                    case 13:
                        setpos(0, scr.getY());
                        break;
                    case 10:
                        setpos(scr.getX(), scr.getY() + 1);
                        if ( scr.getY() >= (scr.getYsize()-1) ) scr.scroll();
                        if (nlcounter++ >= numbernl) {
                            writeGif('n');
                            nlcounter = 0;
                            charcount = 0;
                        }
                        break;
                    case 12: // ^L form feed
                    case 11: // Vertical tab
                        setpos(0, scr.getY());
                        break;

                    case 27: // ESC
                        if (esccounter++ >= numberesc) {
                            writeGif('E');
                            esccounter = 0;
                            charcount = 0;
                        }
                        // writeGif();
                        c = infile.read();
                        switch (c) {
                        case '7': // cursor save
                            X_save = scr.getX();
                            Y_save = scr.getY();
                            break;
                        case '8':
                            setpos(X_save, Y_save);
                            break;
                        case 'P': // ignore Device control string
                            while ((( c = infile.read() ) != 27 ) &&
                                   ( c != -1 ))
                                /* ccc */;
                            c = infile.read();
                            break;
                        case '\\':
                            break;
                        case '(': // Chose g0 charset
                            if ((char) infile.read() == '0') {
                                current_mode |= mode_graphics;
                                g1charset = true;
                            } else {
                                current_mode &= ( 0xff - mode_graphics );
                                g1charset = false;
                            }
                            break;
                        case ')': // Chose g1 charset
                            if ((char) infile.read() != '0') {
                                current_mode |= mode_graphics;
                                g1charset = true;
                            } else {
                                current_mode &= ( 0xff - mode_graphics );
                                g1charset = false;
                            }
                            break;
                        case '#':
                            c = infile.read();
                            switch (c) {
                            default:
                                break;
                            }
                            break;


                        case '[': // THE BIG ONE
                            vt100_ptr = 0;
                            for (loop = 0; loop < param_ptr; loop++) {
                                vt100_params[loop] = 0;
//                                        vt100[loop] = '\0';
                            }
                            param_ptr = 0;
                            c = ';';
                            q_mark = 0;
                            while (
                                    ( c == ';' ||
                                     (
                                      ( c >= '0' ) &&
                                      ( c <= '9' )
                                     )
                                    ) &&
                                    ( vt100_ptr < VT100_BUF ) &&
                                    ( c != -1 )
                                   ) {
                                while (
                                        (
                                          ( c = infile.read() )
                                          <=
                                          '9'
                                        ) &&
                                        ( c >= '0' ) &&
                                        ( c != -1 )
                                      ) {
                                    vt100[vt100_ptr] = (char) c;
                                    vt100_ptr++;
                                }
                                if (c == '?') {
                                    q_mark = 1;
                                    c = ';';
                                } else {
                                    vt100[vt100_ptr] = 0;
                                    vt100_params[param_ptr++] =
                                            myAtoI(vt100);
                                    for (int ti = 0; ti < vt100_ptr; ti++) {
                                        vt100[ti] = '\0';
                                    }
                                    vt100_ptr = 0;
                                }
                            }
                            if (q_mark == 1) {
                                switch (c) {
                                case 8:
                                    int tx = scr.getX() - 1;
                                    if (tx < 0) {
                                        tx = 0;
                                    }
                                    setpos(tx, scr.getY());
                                    break;
                                case 9:
                                    setpos(( scr.getX() / 9 + 9 ), scr.getY());
                                    break;
                                case 10:
                                case 13:
                                    setpos(0, scr.getY());
                                    break;
                                case 11:
                                case 12:
                                    setpos(scr.getX(), scr.getX() + 1);
                                    break;
                                default:
                                    break;
                                }
                            } else {
                                int tx, ty;
                                switch (c) { // esc action swtch
                                case 'H': // goto xy
                                case 'f':
                                    tx = ( vt100_params[1] == 0 ) ?
                                        0 :
                                        vt100_params[1] - 1;
                                    ty = ( vt100_params[0] == 0 ) ?
                                        0 :
                                        vt100_params[0] - 1;
                                    setpos(tx, ty);
                                    break;
                                case 'A':
                                    ty = scr.getY();
                                    ty -= ( vt100_params[0] > 0 )
                                            ? vt100_params[0]
                                            : 1;
                                    setpos(scr.getX(), ty);
                                    break;
                                case 'B':
                                    ty = scr.getY();
                                    ty += ( vt100_params[0] > 0 )
                                            ? vt100_params[0]
                                            : 1;
                                    setpos(scr.getX(), ty);
                                    break;
                                case 'C':
                                    tx = scr.getX();
                                    tx += ( vt100_params[0] > 0 )
                                            ? vt100_params[0]
                                            : 1;
                                    setpos(tx, scr.getY());
                                    break;
                                case 'D':
                                    tx = scr.getX();
                                    tx -= ( vt100_params[0] > 0 )
                                            ? vt100_params[0]
                                            : 1;
                                    if (tx < 0) {
                                        tx = 0;
                                    }
                                    setpos(tx, scr.getY());
                                    break;
                                case 'd':
                                    ty = ( vt100_params[0] == 0 )
                                            ? 0
                                            : vt100_params[0] - 1;
                                    setpos(scr.getX(), ty);
                                    break;
                                case 'e':
                                    ty = scr.getY();
                                    ty += ( vt100_params[0] == 0 )
                                            ? 0
                                            : vt100_params[0] - 1;
                                    setpos(scr.getX(), ty);
                                    break;
                                case 'G':
                                    tx = ( vt100_params[0] == 0 )
                                            ? 1
                                            : vt100_params[0];
                                    setpos(tx, scr.getY());
                                    break;
                                case 'X':
                                    for (tx = scr.getX() + 1;
                                         tx < scr.getXsize();
                                         tx++) {
                                        scr.setchar(tx - 1,
                                                scr.getY(),
                                                scr.getChar(tx, scr.getY()));
                                    }
                                    scr.setchar(scr.getXsize() - 1,
                                                scr.getY(), ' ');
                                    break;
                                case 's':
                                    X_save = scr.getX();
                                    Y_save = scr.getY();
                                    break;
                                case 'u':
                                    setpos(X_save, Y_save);
                                    break;
                                case 'J':
                                    writeGif('J');
                                    switch (vt100_params[0]) {
                                    case 1:
                                        scr.clearBOL();
                                        for (ty = 0; ty < scr.getY(); ty++) {
                                            scr.clearLine(ty);
                                        }
                                        break;
                                    case 2:
                                        for (ty = 0;
                                             ty < scr.getYsize();
                                             ty++) {
                                            scr.clearLine(ty);
                                        }
                                        break;
                                    default:
                                        scr.clearEOL();
                                        for (ty = scr.getY() + 1;
                                             ty < scr.getYsize();
                                             ty++) {
                                            scr.clearLine(ty);
                                        }
                                        break;
                                    }
                                    break;
                                case 'K':
                                    //writeGif();
                                    switch (vt100_params[0]) {
                                    case 1:
                                        scr.clearBOL();
                                        break;
                                    case 2:
                                        scr.clearLine();
                                        break;
                                    default:
                                        scr.clearEOL();
                                        break;
                                    }
                                    break;
                                case 'm': // color chooser
                                    for (loop = 0; loop < param_ptr; loop++) {
                                        if (vt100_params[loop] <= 8) {
                                            if (vt100_params[loop] == 0) {
                                                current_mode &= mode_graphics;
                                            } else {
                                                current_mode |= 1 <<
                                                        ( vt100_params[loop]
                                                          - 1 );
                                            }
                                        }
                                        if (( vt100_params[loop] >= 30 ) &&
                                                ( vt100_params[loop] <= 37 )) {
                                            scr.setFColor(
                                                    vt100_params[loop]-30);
                                        }
                                        if (( vt100_params[loop] >= 40 ) &&
                                                ( vt100_params[loop] <= 47 )) {
                                            scr.setBColor(
                                                    vt100_params[loop] - 40);
                                        }
                                        if (vt100_params[loop] == 1) {
                                            boldmode = true;
                                        }
                                        if (vt100_params[loop] == 0) {
                                            boldmode = false;
                                        }
                                        if (vt100_params[loop] == 10) {
                                            boldmode = false;
                                            scr.setBColor(0);
                                            scr.setFColor(7);
                                        }
                                    }
                                    break;
                                case 'r':  // things to ignore
                                case 'h':
                                case 'l':
                                case '?':
                                    break;
                                default:
                                    doUnread(c);
                                    System.out.print("?? <ESC>[");
                                    for (int tc = 0; tc < param_ptr; tc++) {
                                        System.out.print(vt100_params[tc]);
                                        if (tc < ( param_ptr - 1 )) {
                                            System.out.print(';');
                                        }
                                    }
                                    System.out.println((char) c);
                                    break;
                                }
                            }
                        default:
                            break;
                        }
                    }
                } // else esc */
            }
        } catch (IOException e) {
            System.err.println("Error reading file!\n" + e);
        } finally {
            try {
                infile.close();
            } catch (Exception e) {
                System.out.println("ERROR " + e);
            }
        }
    }

    private int myAtoI(char[] c) {
        int t = 0;
        int i;
        i = 0;
        while (c[i] != '\0') {
            t *= 10;
            t += c[i] - '0';
            i++;
        }
        return t;
    }

    public void setDelay(int d) {
        delay = d;
    }

    public void setNL(int n) {
        numbernl = n;
    }

    public void setESC(int n) {
        numberesc = n;
    }

    void setflush(int f) {
        charcountmax = f;
    }

    //@SuppressWarnings("static-access")
    void copyr(String version,
            int numnl,
            int numesc,
            int flushcount,
            int delay,
            String infile,
            String outfile) {
        int i, j;
        String nltxt  = "new Frame after " + numnl + " <NL> chars";
        String esctxt = "and " + numesc + " <ESC> chars";
        String ctxt   = "new Frame after " + flushcount + " chars,";
        String dtxt   = "delay of " + delay + " ms between frames";
        String itxt   = "infile was \"" + infile + "\"";
        String blank  = "  ";
        //String otxt = "outfile written to \"" +outfile + "\"";
        String cop = Main.v.getCopy();
        String tstring;
        Date d = new Date();

        for (j = 0; j < Version.artname.length; j++) {
            setpos(0, j + 1);
            for (i = 0; i < Version.artname[j].length(); i++) {
                Iputchar(Version.artname[j].charAt(i));
            }
        }
        setpos(1, 10);
        for (i = 0; i < version.length(); i++) {
            Iputchar(version.charAt(i));
        }
        for (i = 0; i < blank.length(); i++) {
            Iputchar(blank.charAt(i));
        }
        for (i = 0; i < cop.length(); i++) {
            Iputchar(cop.charAt(i));
        }
        setpos(1, 11);
        for (i = 0; i < nltxt.length(); i++) {
            Iputchar(nltxt.charAt(i));
        }
        for (i = 0; i < blank.length(); i++) {
            Iputchar(blank.charAt(i));
        }
        for (i = 0; i < esctxt.length(); i++) {
            Iputchar(esctxt.charAt(i));
        }
        setpos(1, 12);
        for (i = 0; i < ctxt.length(); i++) {
            Iputchar(ctxt.charAt(i));
        }
        for (i = 0; i < blank.length(); i++) {
            Iputchar(blank.charAt(i));
        }
        for (i = 0; i < dtxt.length(); i++) {
            Iputchar(dtxt.charAt(i));
        }
        setpos(1, 13);
        for (i = 0; i < itxt.length(); i++) {
            Iputchar(itxt.charAt(i));
        }
        if (14 < ysize) {
            setpos(1, 14);
            tstring = "java: '" +
                    System.getProperty("java.vendor") +
                    "' V " +
                    System.getProperty("java.version") +
                    " started by " +
                    System.getProperty("user.name");
            for (i = 0; i < tstring.length(); i++) {
                Iputchar(tstring.charAt(i));
            }
        }
        if (15 < ysize) {
            setpos(1, 15);
            tstring = "OS: " +
                    System.getProperty("os.name") +
                    " " +
                    System.getProperty("os.version") +
                    " (" +
                    System.getProperty("os.arch") + ") at " +
                    d.toString();
            for (i = 0; i < tstring.length(); i++) {
                Iputchar(tstring.charAt(i));
            }
        }
        gif.setDelay(fdelay);
        cls();
        gif.setDelay(delay);
        gif.setRepeat(1);

    }

    void setFDelay(int d) {
        fdelay=d;
    }
}
